//A fórmula para calcular a área de uma circunferência é: area = π . raio2. 
//Considerando para este problema que π = 3.14159:
//Efetue o cálculo da área, elevando o valor de raio ao quadrado e multiplicando por π.
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;


public class MinhaPrimeiraClasse {
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());

    double raio = Double.parseDouble(st.nextToken());
    double area = 0;
		area = 3.14159 * (Math.pow(  raio  ,2));
		System.out.printf("A=%.4f\n", area);
	}
}

//Leia quatro números (N1, N2, N3, N4), cada um deles com uma casa decimal, correspondente às quatro notas de um aluno. 
//Calcule a média com pesos 2, 3, 4 e 1, respectivamente, para cada uma destas notas e mostre esta média acompanhada pela mensagem "Media: ". 
//Se esta média for maior ou igual a 7.0, imprima a mensagem "Aluno aprovado.". 
//Se a média calculada for inferior a 5.0, imprima a mensagem "Aluno reprovado.". 
//Se a média calculada for um valor entre 5.0 e 6.9, inclusive estas, o programa deve imprimir a mensagem "Aluno em exame.".
//No caso do aluno estar em exame, leia um valor correspondente à nota do exame obtida pelo aluno. 
//Imprima então a mensagem "Nota do exame: " acompanhada pela nota digitada.
//Recalcule a média (some a pontuação do exame com a média anteriormente calculada e divida por 2). e imprima a mensagem "Aluno aprovado." (caso a média final seja 5.0 ou mais ) ou "Aluno reprovado.", (caso a média tenha ficado 4.9 ou menos). 
//Para estes dois casos (aprovado ou reprovado após ter pego exame) apresente na última linha uma mensagem "Media final: " seguido da média final para esse aluno.
import java.io.IOException;
import java.util.Locale;
import java.util.Scanner;



public class Desafio{


   public static void main(String[] args) throws IOException {

      Scanner sc = new Scanner(System.in);
      sc.useLocale(Locale.ENGLISH);
      Locale.setDefault(new Locale("en", "US"));

      float n1,n2,n3,n4,media;
      double emexame,emexamefinal;

      n1 = sc.nextFloat();
      n2 = sc.nextFloat();
      n3 = sc.nextFloat();
      n4 = sc.nextFloat();
      media = (n1*2 + n2*3 + n3*4 + n4) / 10;


 System.out.printf("Media: %.1f%n" , media);

      //continue a solucao de acordo com o enunciado

      if (media >= 7){
         System.out.printf("Aluno aprovado.\n");   
      }
      else if (media < 5){
         System.out.printf("Aluno reprovado.\n");   
      }
      if (media >= 5.0 && media <= 6.9) {
        System.out.println("Aluno em exame.");
        emexame = sc.nextDouble();
        System.out.printf("Nota do exame: %.1f%n", emexame);
        emexamefinal = ((emexame + media) / 2.0);
      if (emexamefinal >= 5.0) {
         System.out.println("Aluno aprovado.");
         System.out.printf("Media final: %.1f%n", emexamefinal);
      }
      else{
          System.out.println("Aluno reprovado");
           System.out.printf("Media final: %.1f%n", emexamefinal);
  }
 }

 sc.close();

 }



}

//A corrida de tartarugas é um esporte que cresceu muito nos últimos anos, fazendo com que vários competidores se dediquem a capturar tartarugas rápidas, e treina-las para faturar milhões em corridas pelo mundo. 
//Porém a tarefa de capturar tartarugas não é uma tarefa muito fácil, pois quase todos esses répteis são bem lentos. 
//Cada tartaruga é classificada em um nível dependendo de sua velocidade:
//Nível 1: Se a velocidade é menor que 10 cm/h .
//Nível 2: Se a velocidade é maior ou igual a 10 cm/h e menor que 20 cm/h .
//Nível 3: Se a velocidade é maior ou igual a 20 cm/h .
//Sua tarefa é identificar qual o nível de velocidade da tartaruga mais veloz de um grupo.
import java.io.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.util.Arrays;
public class Desafio {
    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));


		int n;
  do {

    n = Integer.parseInt(br.readLine());

    String str = br.readLine();

    String s[] = str.split(" ");



      int[] arrayInt = Arrays.asList(s).stream().mapToInt(Integer::parseInt).toArray();

      int max = Arrays.stream(arrayInt).max().getAsInt();

      int m = (max >= 20) ? 3 : (max < 10) ? 1 : 2;

      System.out.println(m);

  } while (br.ready());

  }

}


//Crie um algoritmo que receba dois inputs que sejam strings e combine-as alternando as letras de cada string. 
//Deve começar pela primeira letra da primeira string, seguido pela primeira letra da segunda string, em seguida pela segunda letra da primeira string e continuar dessa forma sucessivamente.
//As letras restantes da cadeia mais longa devem ser adicionadas ao fim da string resultante e retornada.
import java.util.Scanner;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Desafio {

   public static void main(String[] args) throws IOException {
       BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); // recebe o imput
       int linhas = Integer.parseInt(br.readLine()); //lê a int 
       String palavra1;// declara a primeira palavra
       String palavra2;// declara a segunda palavra
       for (int i = 0; i < linhas; i++) {
           var linha = br.readLine().split(" "); // para cada linha separa por espaço
           try {
               palavra1 = linha[0];
           } catch (Exception e) {
               palavra1 = ""; 
           } // primeira palavra antes do espaço
           try {
               palavra2 = linha[1];
           } catch (Exception e) {
               palavra2 = "";
           } // segunda palavra depois do espaço
           combinar(palavra1, palavra2); // combina as palavras, termo definino abaixo
       }
   }

   private static void combinar(String p1, String p2) {
       String combinacao = "";
       for (int i = 0; i < p1.length(); i++) {
           try {
               combinacao += String.valueOf(p1.charAt(i)) + String.valueOf(p2.charAt(i));
           }catch (Exception e){
               combinacao += String.valueOf(p1.charAt(i)); 
           } 
       }
       if(p2.length() > p1.length()) {
           int qtde = p2.length() - p1.length();
           for (int i = p2.length() - qtde; i < p2.length(); i++) {
               combinacao += String.valueOf(p2.charAt(i));
           }
       }

       System.out.println(combinacao);
   }
}
//Paulinho tem em suas mãos um novo problema.
//Agora a sua professora lhe pediu que construísse um programa para verificar, à partir de dois valores muito grandes A e B, se B corresponde aos últimos dígitos de A.
import java.io.IOException;
import java.util.Scanner;

public class Desafio {

	public static void main(String[] args) throws IOException {
		Scanner leitor = new Scanner(System.in);
		int N = leitor.nextInt();

//continue a solucao

		for (  int i=0; i < N; i++ ) {
			String a  = leitor.next();
			String b = leitor.next();
			if ( a.endsWith(b)             ) 
				System.out.println("encaixa");
			else 
				System.out.println("nao encaixa");
		}
	}
